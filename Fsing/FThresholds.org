#+TITLE: F-Thresholds Package

* Master file: [[file:./FThresholdsPackage/FThresholds.m2][FThresholds.m2]]
* Basic functions: [[file:./FThresholdsPackage/FThresholds/BasicFunctions.m2][BasicFunctions.m2]] [3/5]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
** Tests: [[file:./FThresholdsPackage/FThresholds/BasicFunctionsTest.m2][BasicFunctionsTest.m2]] [0/1]
*** TODO Start tests file
** Functions [3/4]
*** denominator
*** numerator
*** fracPart
*** numberToPrimeFactorList
*** allFactors
*** findNumberBetweenWithDenom
*** findNumberBetween
*** getCanVector
*** getNumAndDenom
*** taxicabNorm
*** selectNonzero
*** selectPositive
*** nonzeroPositions
*** zeroPositions
*** isPolynomial
*** isPolynomialOverPosCharField
*** isPolynomislOverFiniteField
*** isDiagonal
*** isMonomial
*** isBinomial
*** isBinaryForm
*** isNonCostantBinaryForm
*** isLinearBinaryForm
*** xInt
*** maxIdeal
*** factorsAndMultiplicities (was factorList) [1/1] 
**** DONE Move to BasicFunctions
     CLOSED: [2018-08-13 Mon 11:40]
*** splittingField [1/2]
**** TODO Determine to what class of polynomials this applies
**** DONE Move to BasicFunctions
     CLOSED: [2018-08-13 Mon 11:40]
*** checkOptions [1/1]
**** DONE Include tests with functions that return boolean values.
     CLOSED: [2018-08-16 Thu 08:58]
* Main functions: [[file:./FThresholdsPackage/FThresholds/MainFunctions.m2][MainFunctions.m2]] [10/12]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
** Documentation: [[file:./FThresholdsPackage/FThresholds/MainFunctionsDoc.m2][MainFunctionsDoc.m2]] 
** Tests: [[file:./FThresholdsPackage/FThresholds/MainFunctionsTest.m2][MainFunctionsTest.m2]]
* Functions [14/20]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
*** nu1
*** testRoot
*** testPower
*** testFrobeniusPower
*** binarySearch
*** binarySearchRecursive
*** linearSearch
*** nuInternal [2/4]
**** DONE Use special algorithms for binomials and diagonal polynomials (and mayne forms?) 
     CLOSED: [2018-08-27 Mon 15:30]
**** DONE In the principal case, with respect to max ideal, if some nu is q-1, return answer right away
     CLOSED: [2018-08-27 Mon 15:30]
**** TODO Document above features
**** TODO Try to use frobeniusPowers to get better upper bounds
*** nu
*** fptApproximation
*** ftApproximation
*** criticalExponentApproximation
*** guessFPT [1/1]
**** DONE Incorporate in fpt
     CLOSED: [2018-08-27 Mon 13:34]
*** fSig
*** fpt [6/6]
**** DONE fpt needs a version with a single argument, for cases when the special algorithms are used.
    CLOSED: [2018-08-14 Tue 17:31]
    Now second argument was replaced with the option DepthOfSearch
**** DONE Alternatively, the exponent e could be an option value (if you pass this option, fpt will try the nu computations and everything after; if not, then it won't).
     CLOSED: [2018-08-16 Thu 09:05]
**** DONE Maybe DiagonalCheck, BinomialCheck, etc, is too much, and we could have only one option, say "UseSpecialAlgorithms" (default True). If set to false, it will go straight to the nu computation.
     CLOSED: [2018-08-16 Thu 09:04]
**** DONE Check if SeachDepth is positive
     CLOSED: [2018-08-16 Thu 09:00]
**** DONE binaryFormFPT has a template that doesn't fit the fpt function; add that template 
     CLOSED: [2018-08-16 Thu 12:22]
**** DONE Now document that template
     CLOSED: [2018-08-16 Thu 17:55]
*** getNonzeroGenerator
*** isLocallyPrincipalIdeal
*** getDivisorIndex
*** compareFPT
**** TODO Add CheckOptions
*** compareFPTPoly
*** isFPT [3/4]
**** DONE Change name so it doesn't refer to type of argument
     CLOSED: [2018-08-13 Mon 11:24]
**** DONE Rewrite, so as not to assume a polynomial ring
     CLOSED: [2018-08-16 Thu 17:54]
**** DONE Origin does not seem to do anything (KILLED)
     CLOSED: [2018-08-13 Mon 13:01]
**** TODO Add CheckOptions
*** isFJumpingExponent [2/3]
**** DONE Change name so it doesn't refer to type of argument
     CLOSED: [2018-08-13 Mon 11:25]
**** DONE Rewrite, so as not to assume a polynomial ring
     CLOSED: [2018-08-17 Fri 22:26]
**** TODO Add CheckOptions
*** isFJumpingExponentPoly
*** isInForbiddenInterval [0/1]
**** TODO Implement and use it as a first test for isFPT
  
* Special FT functions: [[file:./FThresholdsPackage/FThresholds/SpecialFThresholds.m2][SpecialFThresholds.m2]] [4/4]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
** Tests: [[file:./FThresholdsPackage/FThresholds/SpecialFThresholdsTest.m2][SpecialFThresholdsTest.m2]] 
** Functions [4/4]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
*** carryTest
*** firstCarry
*** diagonalFPT
*** factorOurMonomial
*** monomialFactor
*** twoIntersection
*** allIntersections
*** isInPolytope
*** isInInteriorPolytope
*** polytopeDefiningPoints
*** maxCoordinateSum
*** dCalculation
*** calculateEpsilon
*** binomialFPT
*** setFTData
*** isInUpperRegion
*** isInLowerRegion
*** neighborInUpperRegion
*** isCP
*** findCPBelow
*** binaryFormFPTInternal
*** binaryFormFPT [4/4]
**** DONE Replace PrintCP with a Verbose option
     CLOSED: [2018-08-16 Thu 12:21]
**** DONE Get rid of MaxExp
     CLOSED: [2018-08-16 Thu 11:53]
**** DONE Check for proper way to define ring
     CLOSED: [2018-08-16 Thu 11:53]
**** DONE Replace Nontrivial with "Nontrivial"
     CLOSED: [2018-08-16 Thu 09:06]
* General TODOs, notes, questions, etc. [3/4]

** TODO Add output type to every method function 
    (e.g.,  divisor (BasicList, BasicList) := BasicDiv => o -> (l1, l2) -> ) 
** DONE Should a function reject non-valid options? If so, how? (This is now done with the function checkOptions)
   CLOSED: [2018-08-14 Tue 10:14]
** DONE Add checkOptions wherever appropriate
   CLOSED: [2018-08-14 Tue 17:30]
